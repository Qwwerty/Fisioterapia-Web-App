{"remainingRequest":"/home/qwerty/Documents/DESENVOLVIMENTO/paralisiafacial/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/qwerty/Documents/DESENVOLVIMENTO/paralisiafacial/src/components/principal.vue?vue&type=template&id=3692714e&scoped=true&","dependencies":[{"path":"/home/qwerty/Documents/DESENVOLVIMENTO/paralisiafacial/src/components/principal.vue","mtime":1589833696854},{"path":"/home/qwerty/Documents/DESENVOLVIMENTO/paralisiafacial/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/qwerty/Documents/DESENVOLVIMENTO/paralisiafacial/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/qwerty/Documents/DESENVOLVIMENTO/paralisiafacial/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/home/qwerty/Documents/DESENVOLVIMENTO/paralisiafacial/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/qwerty/Documents/DESENVOLVIMENTO/paralisiafacial/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}